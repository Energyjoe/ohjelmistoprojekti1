package kevat25.ohjelmistoprojekti1.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import jakarta.persistence.EntityNotFoundException;
import kevat25.ohjelmistoprojekti1.domain.Lippu;
import kevat25.ohjelmistoprojekti1.domain.LippuRepository;
import kevat25.ohjelmistoprojekti1.domain.Myynti;
import kevat25.ohjelmistoprojekti1.domain.MyyntiDTO;
import kevat25.ohjelmistoprojekti1.domain.MyyntiRepository;

@Service
public class MyyntiService {

    @Autowired
    private MyyntiRepository myyntiRepository;

    @Autowired
    private LippuRepository lippuRepository;

    @Autowired
    private LippuService lippuService; // Service, joka täyttää LippuDTO -objektin datalla

    // Etsii myyntitapahtuman id:n perusteella
    public MyyntiDTO getMyyntiById(Long myyntiId) {
        Myynti myynti = myyntiRepository.findById(myyntiId)
                .orElseThrow(() -> new EntityNotFoundException("Myyntiä ei löytynyt tällä id:llä: " + myyntiId));

        //Etsii kaikki kyseiseen myyntitapahtumaan liittyvät liput
        List<LippuDTO> liput = lippuRepository.findByMyyntiMyyntiId(myyntiId).stream()
                .map(lippuService::getLipputiedot) //Täyttää lipputiedot lippuservicen avulla
                .collect(Collectors.toList()); //Kerää LippuDTO -objektit listaan

        //Luo uuden MyyntiDTO:n, johon vie haetun myynnin tiedot sekä listatut lippuDTO:t
        MyyntiDTO myyntiDTO = new MyyntiDTO();
        myyntiDTO.setMyyntiId(myynti.getMyyntiId());
        myyntiDTO.setMyyntiaika(myynti.getMyyntiaika());
        myyntiDTO.setMyyja(myynti.getMyyja());
        myyntiDTO.setAsiakasEmail(myynti.getAsiakasEmail());
        myyntiDTO.setLiput(liput);

        return myyntiDTO;
    }

    //Hakee kaikki myyntitapahtumat
    public List<MyyntiDTO> getAllMyynnit() {
        List<Myynti> myynnit = myyntiRepository.findAll(); //Hakee kaikki myynti entityt

        return myynnit.stream().map(myynti -> {
            MyyntiDTO myyntiDTO = getMyyntiById(myynti.getMyyntiId()); //Muokkaa myynti entityt MyyntiDTO -objekteiksi
            return myyntiDTO; 
        }).collect(Collectors.toList()); //Kerää myyntiDTO -objektit listaan
    }
}
